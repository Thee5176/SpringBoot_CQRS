name: Build Docker Image, Deploy to EC2
on:
  push:
    branches:
    - main
    - develop
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  build-and-test:
    environment: "AWS and Supabase"
    name: Build and Test CQRS Application
    runs-on: ubuntu-latest
    env:
      DB_URL: ${{ secrets.DB_URL }}
      DB_USERNAME: ${{ vars.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      VITE_HOST_IP: ${{ secrets.EC2_PUBLIC_IP }}
      DOCKERHUB_USERNAME: ${{ vars.DOCKERHUB_USER }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: build Command Unit
        run: |
          chmod +x mvnw
          ./mvnw clean package -Dspring-boot.run.profile=prod
        working-directory: springboot_cqrs_command

      - name: Build Query Unit 
        run: |
          chmod +x mvnw
          ./mvnw clean package -Dspring-boot.run.profile=prod
        working-directory: springboot_cqrs_query

      - name: Start All Services
        run: |
          docker compose -f docker/compose.yaml -f docker/docker-compose.build.yaml build --no-cache

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image
        run: |
          docker compose -f docker/compose.yaml -f docker/docker-compose.build.yaml push

  deliver-code-via-ssh:
    needs: build-and-test
    environment: "AWS and Supabase"
    name: Deliver Code to EC2 Instance via SSH
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up SSH private key and known_hosts
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          # write key safely (preserves newlines)
          sudo printf '%s\n' "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/my_ec2_key
          sudo chmod 600 ~/.ssh/my_ec2_key

          # add host key to known_hosts to avoid interactive prompt
          if [ -n "${{ secrets.EC2_PUBLIC_IP }}" ]; then
            sudo ssh-keyscan -H "${{ secrets.EC2_PUBLIC_IP }}" >> ~/.ssh/known_hosts || true
            sudo chmod 600 ~/.ssh/known_hosts
          fi

      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Deliver Code to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/my_ec2_key ec2-user@${{ secrets.EC2_PUBLIC_IP }} <<EOF
          
            echo "--- Checkout Latest Compose File from Branch ${{ github.head_ref }}: ---"
            cd SpringBoot_CQRS
            git reset --hard HEAD
            git pull origin ${{ github.head_ref }}

            echo "--- Setup Environment Variables outside git repo: ---"
            echo "DB_URL=${{ secrets.DB_URL }}"           >  env.properties
            echo "DB_USERNAME=${{ vars.DB_USER }}"        >> env.properties
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> env.properties
            echo "VITE_HOST_IP=${{ secrets.EC2_PUBLIC_IP }}" >> env.properties
            echo "VITE_COMMAND_PORT=8181"                 >> env.properties
            echo "VITE_QUERY_PORT=8182"                   >> env.properties

            echo "--- Pulling latest Docker images: ---"
            sudo service docker start
            docker-compose -f docker/compose.yaml -f docker/docker-compose.override.yaml pull
            docker-compose -f docker/compose.yaml -f docker/docker-compose.override.yaml up -d --force-recreate --remove-orphans
            
            echo "--- Deployment complete. ---"
          EOF
      
      - name: Cleanup SSH private key
        if: always()
        run: |
          shred -u ~/.ssh/my_ec2_key || rm -f ~/.ssh/my_ec2_key